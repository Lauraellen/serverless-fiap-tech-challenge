service: fiap-cpf-auth

frameworkVersion: '3'

provider:
  name: aws
  runtime: nodejs18.x
  region: ${opt:region, 'us-east-1'}
  stage: ${opt:stage, 'dev'}
  environment:
    STAGE: ${self:provider.stage}
    JWT_SECRET: ${env:JWT_SECRET, 'your-jwt-secret-here'}
    JWT_ISS: ${env:JWT_ISS, 'cpf-auth'}
    JWT_AUD: ${env:JWT_AUD, 'lanchonete-api'}
    JWT_TTL_SECONDS: ${env:JWT_TTL_SECONDS, '900'}
    USER_POOL_ID: ${env:USER_POOL_ID}
    API_BASE_URL: ${env:API_BASE_URL, 'https://provenly-nonrenouncing-josephine.ngrok-free.dev'}
    DYNAMODB_TABLE: ${self:service}-${self:provider.stage}
  
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}"
    - Effect: Allow
      Action:
        - cognito-idp:ListUsers
        - cognito-idp:AdminGetUser
        - cognito-idp:AdminListGroupsForUser
      Resource: "arn:aws:cognito-idp:${self:provider.region}:*:userpool/*"

functions:
  authCpf:
    handler: src/handlers/auth.authenticateCpf
    events:
      - http:
          path: auth/cpf
          method: post
          cors: true
    environment:
      DYNAMODB_TABLE: ${self:provider.environment.DYNAMODB_TABLE}

  cartProxy:
    handler: src/handlers/auth.cartProxy
    events:
      - http:
          path: carts
          method: post
          cors: true
    environment:
      DYNAMODB_TABLE: ${self:provider.environment.DYNAMODB_TABLE}

  registerUser:
    handler: src/handlers/auth.registerUser
    events:
      - http:
          path: auth/register
          method: post
          cors: true
    environment:
      DYNAMODB_TABLE: ${self:provider.environment.DYNAMODB_TABLE}

  getUserByCpf:
    handler: src/handlers/auth.getUserByCpf
    events:
      - http:
          path: user/{cpf}
          method: get
          cors: true
    environment:
      DYNAMODB_TABLE: ${self:provider.environment.DYNAMODB_TABLE}

resources:
  Resources:
    UsersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.DYNAMODB_TABLE}
        AttributeDefinitions:
          - AttributeName: cpf
            AttributeType: S
        KeySchema:
          - AttributeName: cpf
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST

plugins:
  - serverless-offline

custom:
  serverless-offline:
    httpPort: 3000